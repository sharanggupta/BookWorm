name: Deploy GreenForked

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run backend tests
        run: mvn clean test

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push user-service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/user-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push recipe-service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/recipe-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/recipe-service:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push interaction-service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/interaction-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/interaction-service:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push image-processor worker
        uses: docker/build-push-action@v5
        with:
          context: ./workers/image-processor
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/image-processor:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push nutrition-worker
        uses: docker/build-push-action@v5
        with:
          context: ./workers/nutrition-worker
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nutrition-worker:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-development:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Replace secrets in values file
        run: |
          sed -i 's/{{JWT_SECRET}}/${{ secrets.JWT_SECRET_DEV }}/g' deployment/environments/development/values.yaml

      - name: Deploy to development
        run: |
          helm upgrade --install greenforked-dev ./deployment/helm/greenforked \
            --namespace greenforked-dev \
            --create-namespace \
            --values deployment/environments/development/values.yaml \
            --set global.imageTag=${{ needs.build.outputs.version }} \
            --wait \
            --timeout=10m

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Replace secrets in values file
        run: |
          sed -i 's/{{JWT_SECRET}}/${{ secrets.JWT_SECRET_STAGING }}/g' deployment/environments/staging/values.yaml

      - name: Deploy to staging
        run: |
          helm upgrade --install greenforked-staging ./deployment/helm/greenforked \
            --namespace greenforked-staging \
            --create-namespace \
            --values deployment/environments/staging/values.yaml \
            --set global.imageTag=${{ needs.build.outputs.version }} \
            --wait \
            --timeout=15m

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Replace secrets in values file
        run: |
          sed -i 's/{{JWT_SECRET}}/${{ secrets.JWT_SECRET_PROD }}/g' deployment/environments/production/values.yaml

      - name: Deploy to production
        run: |
          helm upgrade --install greenforked-production ./deployment/helm/greenforked \
            --namespace greenforked-production \
            --create-namespace \
            --values deployment/environments/production/values.yaml \
            --set global.imageTag=${{ needs.build.outputs.version }} \
            --wait \
            --timeout=20m

  notify:
    needs: [deploy-development, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          echo "Deployment completed for environment: ${{ github.event.inputs.environment || 'auto' }}"
          echo "Build version: ${{ needs.build.outputs.version }}" 